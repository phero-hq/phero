// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Parsers for an interface boolean array member 1`] = `
"export class MyModelParser {
    static parse(data: any): ParseResult<MyModel> {
        const errors: ValidationError[] = [];
        let result: any;
        if (typeof data !== \\"object\\" || data === null) {
            errors.push({
                path: \\"data\\",
                message: \`null or not an object\`
            });
        }
        else {
            result = {};
            if (!Array.isArray(data[\\"a\\"])) {
                errors.push({
                    path: \\"data.a\\",
                    message: \`not an array\`
                });
            }
            else {
                result[\\"a\\"] = [];
                for (let it_0 = 0; it_0 < data[\\"a\\"].length; it_0++)
                    if (typeof data[\\"a\\"][it_0] !== \\"boolean\\") {
                        errors.push({
                            path: \`data.a[\${it_0}]\`,
                            message: \`not a boolean\`
                        });
                    }
                    else
                        result[\\"a\\"][it_0] = data[\\"a\\"][it_0];
            }
        }
        if (errors.length) {
            return {
                ok: false,
                errors
            };
        }
        return {
            ok: true,
            result: result as MyModel
        };
    }
}"
`;

exports[`Parsers for an interface boolean member 1`] = `
"export class MyModelParser {
    static parse(data: any): ParseResult<MyModel> {
        const errors: ValidationError[] = [];
        let result: any;
        if (typeof data !== \\"object\\" || data === null) {
            errors.push({
                path: \\"data\\",
                message: \`null or not an object\`
            });
        }
        else {
            result = {};
            if (typeof data[\\"a\\"] !== \\"boolean\\") {
                errors.push({
                    path: \\"data.a\\",
                    message: \`not a boolean\`
                });
            }
            else
                result[\\"a\\"] = data[\\"a\\"];
        }
        if (errors.length) {
            return {
                ok: false,
                errors
            };
        }
        return {
            ok: true,
            result: result as MyModel
        };
    }
}"
`;

exports[`Parsers for an interface deep nested object 1`] = `
"export class MyModelParser {
    static parse(data: any): ParseResult<MyModel> {
        const errors: ValidationError[] = [];
        let result: any;
        if (typeof data !== \\"object\\" || data === null) {
            errors.push({
                path: \\"data\\",
                message: \`null or not an object\`
            });
        }
        else {
            result = {};
            if (!Array.isArray(data[\\"a\\"])) {
                errors.push({
                    path: \\"data.a\\",
                    message: \`not an array\`
                });
            }
            else {
                result[\\"a\\"] = [];
                for (let it_0 = 0; it_0 < data[\\"a\\"].length; it_0++)
                    if (typeof data[\\"a\\"][it_0] !== \\"object\\" || data[\\"a\\"][it_0] === null) {
                        errors.push({
                            path: \`data.a[\${it_0}]\`,
                            message: \`null or not an object\`
                        });
                    }
                    else {
                        result[\\"a\\"][it_0] = {};
                        if (data[\\"a\\"][it_0][\\"b\\"] !== undefined)
                            if (typeof data[\\"a\\"][it_0][\\"b\\"] !== \\"object\\" || data[\\"a\\"][it_0][\\"b\\"] === null) {
                                errors.push({
                                    path: \`data.a[\${it_0}].b\`,
                                    message: \`null or not an object\`
                                });
                            }
                            else {
                                result[\\"a\\"][it_0][\\"b\\"] = {};
                                if (typeof data[\\"a\\"][it_0][\\"b\\"][\\"c\\"] !== \\"object\\" || data[\\"a\\"][it_0][\\"b\\"][\\"c\\"] === null) {
                                    errors.push({
                                        path: \`data.a[\${it_0}].b.c\`,
                                        message: \`null or not an object\`
                                    });
                                }
                                else {
                                    result[\\"a\\"][it_0][\\"b\\"][\\"c\\"] = {};
                                    if (!Array.isArray(data[\\"a\\"][it_0][\\"b\\"][\\"c\\"][\\"d\\"])) {
                                        errors.push({
                                            path: \`data.a[\${it_0}].b.c.d\`,
                                            message: \`not an array\`
                                        });
                                    }
                                    else {
                                        result[\\"a\\"][it_0][\\"b\\"][\\"c\\"][\\"d\\"] = [];
                                        for (let it_1 = 0; it_1 < data[\\"a\\"][it_0][\\"b\\"][\\"c\\"][\\"d\\"].length; it_1++)
                                            if (typeof data[\\"a\\"][it_0][\\"b\\"][\\"c\\"][\\"d\\"][it_1] !== \\"object\\" || data[\\"a\\"][it_0][\\"b\\"][\\"c\\"][\\"d\\"][it_1] === null) {
                                                errors.push({
                                                    path: \`data.a[\${it_0}].b.c.d[\${it_1}]\`,
                                                    message: \`null or not an object\`
                                                });
                                            }
                                            else {
                                                result[\\"a\\"][it_0][\\"b\\"][\\"c\\"][\\"d\\"][it_1] = {};
                                                if (typeof data[\\"a\\"][it_0][\\"b\\"][\\"c\\"][\\"d\\"][it_1][\\"e\\"] !== \\"object\\" || data[\\"a\\"][it_0][\\"b\\"][\\"c\\"][\\"d\\"][it_1][\\"e\\"] === null) {
                                                    errors.push({
                                                        path: \`data.a[\${it_0}].b.c.d[\${it_1}].e\`,
                                                        message: \`null or not an object\`
                                                    });
                                                }
                                                else {
                                                    result[\\"a\\"][it_0][\\"b\\"][\\"c\\"][\\"d\\"][it_1][\\"e\\"] = {};
                                                    if (!Array.isArray(data[\\"a\\"][it_0][\\"b\\"][\\"c\\"][\\"d\\"][it_1][\\"e\\"][\\"f\\"])) {
                                                        errors.push({
                                                            path: \`data.a[\${it_0}].b.c.d[\${it_1}].e.f\`,
                                                            message: \`not an array\`
                                                        });
                                                    }
                                                    else {
                                                        result[\\"a\\"][it_0][\\"b\\"][\\"c\\"][\\"d\\"][it_1][\\"e\\"][\\"f\\"] = [];
                                                        for (let it_2 = 0; it_2 < data[\\"a\\"][it_0][\\"b\\"][\\"c\\"][\\"d\\"][it_1][\\"e\\"][\\"f\\"].length; it_2++)
                                                            if (typeof data[\\"a\\"][it_0][\\"b\\"][\\"c\\"][\\"d\\"][it_1][\\"e\\"][\\"f\\"][it_2] !== \\"boolean\\") {
                                                                errors.push({
                                                                    path: \`data.a[\${it_0}].b.c.d[\${it_1}].e.f[\${it_2}]\`,
                                                                    message: \`not a boolean\`
                                                                });
                                                            }
                                                            else
                                                                result[\\"a\\"][it_0][\\"b\\"][\\"c\\"][\\"d\\"][it_1][\\"e\\"][\\"f\\"][it_2] = data[\\"a\\"][it_0][\\"b\\"][\\"c\\"][\\"d\\"][it_1][\\"e\\"][\\"f\\"][it_2];
                                                    }
                                                }
                                            }
                                    }
                                }
                            }
                    }
            }
        }
        if (errors.length) {
            return {
                ok: false,
                errors
            };
        }
        return {
            ok: true,
            result: result as MyModel
        };
    }
}"
`;

exports[`Parsers for an interface null member 1`] = `
"export class MyModelParser {
    static parse(data: any): ParseResult<MyModel> {
        const errors: ValidationError[] = [];
        let result: any;
        if (typeof data !== \\"object\\" || data === null) {
            errors.push({
                path: \\"data\\",
                message: \`null or not an object\`
            });
        }
        else {
            result = {};
            if (typeof data[\\"a\\"] !== null) {
                errors.push({
                    path: \\"data.a\\",
                    message: \`not null\`
                });
            }
            else
                result[\\"a\\"] = data[\\"a\\"];
        }
        if (errors.length) {
            return {
                ok: false,
                errors
            };
        }
        return {
            ok: true,
            result: result as MyModel
        };
    }
}"
`;

exports[`Parsers for an interface number array member 1`] = `
"export class MyModelParser {
    static parse(data: any): ParseResult<MyModel> {
        const errors: ValidationError[] = [];
        let result: any;
        if (typeof data !== \\"object\\" || data === null) {
            errors.push({
                path: \\"data\\",
                message: \`null or not an object\`
            });
        }
        else {
            result = {};
            if (!Array.isArray(data[\\"a\\"])) {
                errors.push({
                    path: \\"data.a\\",
                    message: \`not an array\`
                });
            }
            else {
                result[\\"a\\"] = [];
                for (let it_0 = 0; it_0 < data[\\"a\\"].length; it_0++)
                    if (typeof data[\\"a\\"][it_0] !== \\"number\\") {
                        errors.push({
                            path: \`data.a[\${it_0}]\`,
                            message: \`not a number\`
                        });
                    }
                    else if (isNaN(data[\\"a\\"][it_0])) {
                        errors.push({
                            path: \`data.a[\${it_0}]\`,
                            message: \`invalid number\`
                        });
                    }
                    else
                        result[\\"a\\"][it_0] = data[\\"a\\"][it_0];
            }
        }
        if (errors.length) {
            return {
                ok: false,
                errors
            };
        }
        return {
            ok: true,
            result: result as MyModel
        };
    }
}"
`;

exports[`Parsers for an interface number literal member 1`] = `
"export class MyModelParser {
    static parse(data: any): ParseResult<MyModel> {
        const errors: ValidationError[] = [];
        let result: any;
        if (typeof data !== \\"object\\" || data === null) {
            errors.push({
                path: \\"data\\",
                message: \`null or not an object\`
            });
        }
        else {
            result = {};
            if (data[\\"a\\"] !== 123) {
                errors.push({
                    path: \\"data.a\\",
                    message: \`not 123\`
                });
            }
            else
                result[\\"a\\"] = data[\\"a\\"];
        }
        if (errors.length) {
            return {
                ok: false,
                errors
            };
        }
        return {
            ok: true,
            result: result as MyModel
        };
    }
}"
`;

exports[`Parsers for an interface number member 1`] = `
"export class MyModelParser {
    static parse(data: any): ParseResult<MyModel> {
        const errors: ValidationError[] = [];
        let result: any;
        if (typeof data !== \\"object\\" || data === null) {
            errors.push({
                path: \\"data\\",
                message: \`null or not an object\`
            });
        }
        else {
            result = {};
            if (typeof data[\\"a\\"] !== \\"number\\") {
                errors.push({
                    path: \\"data.a\\",
                    message: \`not a number\`
                });
            }
            else if (isNaN(data[\\"a\\"])) {
                errors.push({
                    path: \\"data.a\\",
                    message: \`invalid number\`
                });
            }
            else
                result[\\"a\\"] = data[\\"a\\"];
        }
        if (errors.length) {
            return {
                ok: false,
                errors
            };
        }
        return {
            ok: true,
            result: result as MyModel
        };
    }
}"
`;

exports[`Parsers for an interface object literal array member 1`] = `
"export class MyModelParser {
    static parse(data: any): ParseResult<MyModel> {
        const errors: ValidationError[] = [];
        let result: any;
        if (typeof data !== \\"object\\" || data === null) {
            errors.push({
                path: \\"data\\",
                message: \`null or not an object\`
            });
        }
        else {
            result = {};
            if (!Array.isArray(data[\\"a\\"])) {
                errors.push({
                    path: \\"data.a\\",
                    message: \`not an array\`
                });
            }
            else {
                result[\\"a\\"] = [];
                for (let it_0 = 0; it_0 < data[\\"a\\"].length; it_0++)
                    if (typeof data[\\"a\\"][it_0] !== \\"object\\" || data[\\"a\\"][it_0] === null) {
                        errors.push({
                            path: \`data.a[\${it_0}]\`,
                            message: \`null or not an object\`
                        });
                    }
                    else {
                        result[\\"a\\"][it_0] = {};
                        if (typeof data[\\"a\\"][it_0][\\"b\\"] !== \\"number\\") {
                            errors.push({
                                path: \`data.a[\${it_0}].b\`,
                                message: \`not a number\`
                            });
                        }
                        else if (isNaN(data[\\"a\\"][it_0][\\"b\\"])) {
                            errors.push({
                                path: \`data.a[\${it_0}].b\`,
                                message: \`invalid number\`
                            });
                        }
                        else
                            result[\\"a\\"][it_0][\\"b\\"] = data[\\"a\\"][it_0][\\"b\\"];
                    }
            }
        }
        if (errors.length) {
            return {
                ok: false,
                errors
            };
        }
        return {
            ok: true,
            result: result as MyModel
        };
    }
}"
`;

exports[`Parsers for an interface object literal member 1`] = `
"export class MyModelParser {
    static parse(data: any): ParseResult<MyModel> {
        const errors: ValidationError[] = [];
        let result: any;
        if (typeof data !== \\"object\\" || data === null) {
            errors.push({
                path: \\"data\\",
                message: \`null or not an object\`
            });
        }
        else {
            result = {};
            if (typeof data[\\"a\\"] !== \\"object\\" || data[\\"a\\"] === null) {
                errors.push({
                    path: \\"data.a\\",
                    message: \`null or not an object\`
                });
            }
            else {
                result[\\"a\\"] = {};
                if (typeof data[\\"a\\"][\\"b\\"] !== \\"number\\") {
                    errors.push({
                        path: \\"data.a.b\\",
                        message: \`not a number\`
                    });
                }
                else if (isNaN(data[\\"a\\"][\\"b\\"])) {
                    errors.push({
                        path: \\"data.a.b\\",
                        message: \`invalid number\`
                    });
                }
                else
                    result[\\"a\\"][\\"b\\"] = data[\\"a\\"][\\"b\\"];
            }
        }
        if (errors.length) {
            return {
                ok: false,
                errors
            };
        }
        return {
            ok: true,
            result: result as MyModel
        };
    }
}"
`;

exports[`Parsers for an interface optional member 1`] = `
"export class MyModelParser {
    static parse(data: any): ParseResult<MyModel> {
        const errors: ValidationError[] = [];
        let result: any;
        if (typeof data !== \\"object\\" || data === null) {
            errors.push({
                path: \\"data\\",
                message: \`null or not an object\`
            });
        }
        else {
            result = {};
            if (data[\\"a\\"] !== undefined)
                if (typeof data[\\"a\\"] !== \\"string\\") {
                    errors.push({
                        path: \\"data.a\\",
                        message: \`not a string\`
                    });
                }
                else
                    result[\\"a\\"] = data[\\"a\\"];
        }
        if (errors.length) {
            return {
                ok: false,
                errors
            };
        }
        return {
            ok: true,
            result: result as MyModel
        };
    }
}"
`;

exports[`Parsers for an interface optional object literal member 1`] = `
"export class MyModelParser {
    static parse(data: any): ParseResult<MyModel> {
        const errors: ValidationError[] = [];
        let result: any;
        if (typeof data !== \\"object\\" || data === null) {
            errors.push({
                path: \\"data\\",
                message: \`null or not an object\`
            });
        }
        else {
            result = {};
            if (data[\\"a\\"] !== undefined)
                if (typeof data[\\"a\\"] !== \\"object\\" || data[\\"a\\"] === null) {
                    errors.push({
                        path: \\"data.a\\",
                        message: \`null or not an object\`
                    });
                }
                else {
                    result[\\"a\\"] = {};
                    if (typeof data[\\"a\\"][\\"b\\"] !== \\"number\\") {
                        errors.push({
                            path: \\"data.a.b\\",
                            message: \`not a number\`
                        });
                    }
                    else if (isNaN(data[\\"a\\"][\\"b\\"])) {
                        errors.push({
                            path: \\"data.a.b\\",
                            message: \`invalid number\`
                        });
                    }
                    else
                        result[\\"a\\"][\\"b\\"] = data[\\"a\\"][\\"b\\"];
                }
        }
        if (errors.length) {
            return {
                ok: false,
                errors
            };
        }
        return {
            ok: true,
            result: result as MyModel
        };
    }
}"
`;

exports[`Parsers for an interface optional object literal with optional member 1`] = `
"export class MyModelParser {
    static parse(data: any): ParseResult<MyModel> {
        const errors: ValidationError[] = [];
        let result: any;
        if (typeof data !== \\"object\\" || data === null) {
            errors.push({
                path: \\"data\\",
                message: \`null or not an object\`
            });
        }
        else {
            result = {};
            if (data[\\"a\\"] !== undefined)
                if (typeof data[\\"a\\"] !== \\"object\\" || data[\\"a\\"] === null) {
                    errors.push({
                        path: \\"data.a\\",
                        message: \`null or not an object\`
                    });
                }
                else {
                    result[\\"a\\"] = {};
                    if (data[\\"a\\"][\\"b\\"] !== undefined)
                        if (typeof data[\\"a\\"][\\"b\\"] !== \\"number\\") {
                            errors.push({
                                path: \\"data.a.b\\",
                                message: \`not a number\`
                            });
                        }
                        else if (isNaN(data[\\"a\\"][\\"b\\"])) {
                            errors.push({
                                path: \\"data.a.b\\",
                                message: \`invalid number\`
                            });
                        }
                        else
                            result[\\"a\\"][\\"b\\"] = data[\\"a\\"][\\"b\\"];
                }
        }
        if (errors.length) {
            return {
                ok: false,
                errors
            };
        }
        return {
            ok: true,
            result: result as MyModel
        };
    }
}"
`;

exports[`Parsers for an interface optional string array member 1`] = `
"export class MyModelParser {
    static parse(data: any): ParseResult<MyModel> {
        const errors: ValidationError[] = [];
        let result: any;
        if (typeof data !== \\"object\\" || data === null) {
            errors.push({
                path: \\"data\\",
                message: \`null or not an object\`
            });
        }
        else {
            result = {};
            if (data[\\"a\\"] !== undefined)
                if (!Array.isArray(data[\\"a\\"])) {
                    errors.push({
                        path: \\"data.a\\",
                        message: \`not an array\`
                    });
                }
                else {
                    result[\\"a\\"] = [];
                    for (let it_0 = 0; it_0 < data[\\"a\\"].length; it_0++)
                        if (typeof data[\\"a\\"][it_0] !== \\"string\\") {
                            errors.push({
                                path: \`data.a[\${it_0}]\`,
                                message: \`not a string\`
                            });
                        }
                        else
                            result[\\"a\\"][it_0] = data[\\"a\\"][it_0];
                }
        }
        if (errors.length) {
            return {
                ok: false,
                errors
            };
        }
        return {
            ok: true,
            result: result as MyModel
        };
    }
}"
`;

exports[`Parsers for an interface string array member 1`] = `
"export class MyModelParser {
    static parse(data: any): ParseResult<MyModel> {
        const errors: ValidationError[] = [];
        let result: any;
        if (typeof data !== \\"object\\" || data === null) {
            errors.push({
                path: \\"data\\",
                message: \`null or not an object\`
            });
        }
        else {
            result = {};
            if (!Array.isArray(data[\\"a\\"])) {
                errors.push({
                    path: \\"data.a\\",
                    message: \`not an array\`
                });
            }
            else {
                result[\\"a\\"] = [];
                for (let it_0 = 0; it_0 < data[\\"a\\"].length; it_0++)
                    if (typeof data[\\"a\\"][it_0] !== \\"string\\") {
                        errors.push({
                            path: \`data.a[\${it_0}]\`,
                            message: \`not a string\`
                        });
                    }
                    else
                        result[\\"a\\"][it_0] = data[\\"a\\"][it_0];
            }
        }
        if (errors.length) {
            return {
                ok: false,
                errors
            };
        }
        return {
            ok: true,
            result: result as MyModel
        };
    }
}"
`;

exports[`Parsers for an interface string literal member 1`] = `
"export class MyModelParser {
    static parse(data: any): ParseResult<MyModel> {
        const errors: ValidationError[] = [];
        let result: any;
        if (typeof data !== \\"object\\" || data === null) {
            errors.push({
                path: \\"data\\",
                message: \`null or not an object\`
            });
        }
        else {
            result = {};
            if (data[\\"a\\"] !== \\"aap\\") {
                errors.push({
                    path: \\"data.a\\",
                    message: \`not 'aap'\`
                });
            }
            else
                result[\\"a\\"] = data[\\"a\\"];
        }
        if (errors.length) {
            return {
                ok: false,
                errors
            };
        }
        return {
            ok: true,
            result: result as MyModel
        };
    }
}"
`;

exports[`Parsers for an interface string member 1`] = `
"export class MyModelParser {
    static parse(data: any): ParseResult<MyModel> {
        const errors: ValidationError[] = [];
        let result: any;
        if (typeof data !== \\"object\\" || data === null) {
            errors.push({
                path: \\"data\\",
                message: \`null or not an object\`
            });
        }
        else {
            result = {};
            if (typeof data[\\"a\\"] !== \\"string\\") {
                errors.push({
                    path: \\"data.a\\",
                    message: \`not a string\`
                });
            }
            else
                result[\\"a\\"] = data[\\"a\\"];
        }
        if (errors.length) {
            return {
                ok: false,
                errors
            };
        }
        return {
            ok: true,
            result: result as MyModel
        };
    }
}"
`;

exports[`Parsers for an interface true literal member 1`] = `
"export class MyModelParser {
    static parse(data: any): ParseResult<MyModel> {
        const errors: ValidationError[] = [];
        let result: any;
        if (typeof data !== \\"object\\" || data === null) {
            errors.push({
                path: \\"data\\",
                message: \`null or not an object\`
            });
        }
        else {
            result = {};
            if (data[\\"a\\"] !== true) {
                errors.push({
                    path: \\"data.a\\",
                    message: \`not true\`
                });
            }
            else
                result[\\"a\\"] = data[\\"a\\"];
        }
        if (errors.length) {
            return {
                ok: false,
                errors
            };
        }
        return {
            ok: true,
            result: result as MyModel
        };
    }
}"
`;

exports[`Parsers for an interface with no members 1`] = `
"export class MyModelParser {
    static parse(data: any): ParseResult<MyModel> {
        const errors: ValidationError[] = [];
        let result: any;
        if (typeof data !== \\"object\\" || data === null) {
            errors.push({
                path: \\"data\\",
                message: \`null or not an object\`
            });
        }
        else {
            result = {};
        }
        if (errors.length) {
            return {
                ok: false,
                errors
            };
        }
        return {
            ok: true,
            result: result as MyModel
        };
    }
}"
`;
