// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`generateParserModel for a type alias intersection simple 1`] = `
Object {
  "name": "data",
  "parser": Object {
    "parsers": Array [
      Object {
        "members": Array [
          Object {
            "name": "a",
            "optional": false,
            "parser": Object {
              "type": "string",
            },
            "type": "member",
          },
        ],
        "type": "object",
      },
      Object {
        "oneOf": Array [
          Object {
            "members": Array [
              Object {
                "name": "b",
                "optional": false,
                "parser": Object {
                  "type": "number",
                },
                "type": "member",
              },
            ],
            "type": "object",
          },
          Object {
            "members": Array [
              Object {
                "name": "c",
                "optional": true,
                "parser": Object {
                  "type": "boolean",
                },
                "type": "member",
              },
            ],
            "type": "object",
          },
        ],
        "type": "union",
      },
    ],
    "type": "intersection",
  },
  "rootTypeParser": Object {
    "baseTypeName": "MyModel",
    "typeName": "MyModel",
    "typeParameters": Array [],
  },
  "type": "root",
}
`;

exports[`generateParserModel for a type alias object literal boolean array member 1`] = `
Object {
  "name": "data",
  "parser": Object {
    "members": Array [
      Object {
        "name": "a",
        "optional": false,
        "parser": Object {
          "depth": 0,
          "element": Object {
            "depth": 0,
            "parser": Object {
              "type": "boolean",
            },
            "type": "arrayElement",
          },
          "type": "array",
        },
        "type": "member",
      },
    ],
    "type": "object",
  },
  "rootTypeParser": Object {
    "baseTypeName": "MyModel",
    "typeName": "MyModel",
    "typeParameters": Array [],
  },
  "type": "root",
}
`;

exports[`generateParserModel for a type alias object literal boolean member 1`] = `
Object {
  "name": "data",
  "parser": Object {
    "members": Array [
      Object {
        "name": "a",
        "optional": false,
        "parser": Object {
          "type": "boolean",
        },
        "type": "member",
      },
    ],
    "type": "object",
  },
  "rootTypeParser": Object {
    "baseTypeName": "MyModel",
    "typeName": "MyModel",
    "typeParameters": Array [],
  },
  "type": "root",
}
`;

exports[`generateParserModel for a type alias object literal deep nested object 1`] = `
Object {
  "name": "data",
  "parser": Object {
    "members": Array [
      Object {
        "name": "a",
        "optional": false,
        "parser": Object {
          "members": Array [
            Object {
              "name": "b",
              "optional": true,
              "parser": Object {
                "depth": 0,
                "element": Object {
                  "depth": 0,
                  "parser": Object {
                    "members": Array [
                      Object {
                        "name": "c",
                        "optional": false,
                        "parser": Object {
                          "members": Array [
                            Object {
                              "name": "d",
                              "optional": true,
                              "parser": Object {
                                "type": "number",
                              },
                              "type": "member",
                            },
                          ],
                          "type": "object",
                        },
                        "type": "member",
                      },
                    ],
                    "type": "object",
                  },
                  "type": "arrayElement",
                },
                "type": "array",
              },
              "type": "member",
            },
          ],
          "type": "object",
        },
        "type": "member",
      },
    ],
    "type": "object",
  },
  "rootTypeParser": Object {
    "baseTypeName": "MyModel",
    "typeName": "MyModel",
    "typeParameters": Array [],
  },
  "type": "root",
}
`;

exports[`generateParserModel for a type alias object literal null member 1`] = `
Object {
  "name": "data",
  "parser": Object {
    "members": Array [
      Object {
        "name": "a",
        "optional": false,
        "parser": Object {
          "type": "null",
        },
        "type": "member",
      },
    ],
    "type": "object",
  },
  "rootTypeParser": Object {
    "baseTypeName": "MyModel",
    "typeName": "MyModel",
    "typeParameters": Array [],
  },
  "type": "root",
}
`;

exports[`generateParserModel for a type alias object literal number array member 1`] = `
Object {
  "name": "data",
  "parser": Object {
    "members": Array [
      Object {
        "name": "a",
        "optional": false,
        "parser": Object {
          "depth": 0,
          "element": Object {
            "depth": 0,
            "parser": Object {
              "type": "number",
            },
            "type": "arrayElement",
          },
          "type": "array",
        },
        "type": "member",
      },
    ],
    "type": "object",
  },
  "rootTypeParser": Object {
    "baseTypeName": "MyModel",
    "typeName": "MyModel",
    "typeParameters": Array [],
  },
  "type": "root",
}
`;

exports[`generateParserModel for a type alias object literal number literal member 1`] = `
Object {
  "name": "data",
  "parser": Object {
    "members": Array [
      Object {
        "name": "a",
        "optional": false,
        "parser": Object {
          "literal": 123,
          "type": "number-literal",
        },
        "type": "member",
      },
    ],
    "type": "object",
  },
  "rootTypeParser": Object {
    "baseTypeName": "MyModel",
    "typeName": "MyModel",
    "typeParameters": Array [],
  },
  "type": "root",
}
`;

exports[`generateParserModel for a type alias object literal number member 1`] = `
Object {
  "name": "data",
  "parser": Object {
    "members": Array [
      Object {
        "name": "a",
        "optional": false,
        "parser": Object {
          "type": "number",
        },
        "type": "member",
      },
    ],
    "type": "object",
  },
  "rootTypeParser": Object {
    "baseTypeName": "MyModel",
    "typeName": "MyModel",
    "typeParameters": Array [],
  },
  "type": "root",
}
`;

exports[`generateParserModel for a type alias object literal number model 1`] = `
Object {
  "name": "data",
  "parser": Object {
    "type": "number",
  },
  "rootTypeParser": Object {
    "baseTypeName": "MyModel",
    "typeName": "MyModel",
    "typeParameters": Array [],
  },
  "type": "root",
}
`;

exports[`generateParserModel for a type alias object literal object literal member 1`] = `
Object {
  "name": "data",
  "parser": Object {
    "members": Array [
      Object {
        "name": "a",
        "optional": false,
        "parser": Object {
          "depth": 0,
          "element": Object {
            "depth": 0,
            "parser": Object {
              "members": Array [
                Object {
                  "name": "b",
                  "optional": false,
                  "parser": Object {
                    "type": "number",
                  },
                  "type": "member",
                },
              ],
              "type": "object",
            },
            "type": "arrayElement",
          },
          "type": "array",
        },
        "type": "member",
      },
    ],
    "type": "object",
  },
  "rootTypeParser": Object {
    "baseTypeName": "MyModel",
    "typeName": "MyModel",
    "typeParameters": Array [],
  },
  "type": "root",
}
`;

exports[`generateParserModel for a type alias object literal optional member 1`] = `
Object {
  "name": "data",
  "parser": Object {
    "members": Array [
      Object {
        "name": "a",
        "optional": true,
        "parser": Object {
          "type": "string",
        },
        "type": "member",
      },
    ],
    "type": "object",
  },
  "rootTypeParser": Object {
    "baseTypeName": "MyModel",
    "typeName": "MyModel",
    "typeParameters": Array [],
  },
  "type": "root",
}
`;

exports[`generateParserModel for a type alias object literal optional object literal member 1`] = `
Object {
  "name": "data",
  "parser": Object {
    "members": Array [
      Object {
        "name": "a",
        "optional": true,
        "parser": Object {
          "depth": 0,
          "element": Object {
            "depth": 0,
            "parser": Object {
              "members": Array [
                Object {
                  "name": "b",
                  "optional": false,
                  "parser": Object {
                    "type": "number",
                  },
                  "type": "member",
                },
              ],
              "type": "object",
            },
            "type": "arrayElement",
          },
          "type": "array",
        },
        "type": "member",
      },
    ],
    "type": "object",
  },
  "rootTypeParser": Object {
    "baseTypeName": "MyModel",
    "typeName": "MyModel",
    "typeParameters": Array [],
  },
  "type": "root",
}
`;

exports[`generateParserModel for a type alias object literal optional object literal with optional member 1`] = `
Object {
  "name": "data",
  "parser": Object {
    "members": Array [
      Object {
        "name": "a",
        "optional": true,
        "parser": Object {
          "members": Array [
            Object {
              "name": "b",
              "optional": true,
              "parser": Object {
                "type": "number",
              },
              "type": "member",
            },
          ],
          "type": "object",
        },
        "type": "member",
      },
    ],
    "type": "object",
  },
  "rootTypeParser": Object {
    "baseTypeName": "MyModel",
    "typeName": "MyModel",
    "typeParameters": Array [],
  },
  "type": "root",
}
`;

exports[`generateParserModel for a type alias object literal optional string array member 1`] = `
Object {
  "name": "data",
  "parser": Object {
    "members": Array [
      Object {
        "name": "a",
        "optional": true,
        "parser": Object {
          "depth": 0,
          "element": Object {
            "depth": 0,
            "parser": Object {
              "type": "string",
            },
            "type": "arrayElement",
          },
          "type": "array",
        },
        "type": "member",
      },
    ],
    "type": "object",
  },
  "rootTypeParser": Object {
    "baseTypeName": "MyModel",
    "typeName": "MyModel",
    "typeParameters": Array [],
  },
  "type": "root",
}
`;

exports[`generateParserModel for a type alias object literal string array member 1`] = `
Object {
  "name": "data",
  "parser": Object {
    "members": Array [
      Object {
        "name": "a",
        "optional": false,
        "parser": Object {
          "depth": 0,
          "element": Object {
            "depth": 0,
            "parser": Object {
              "type": "string",
            },
            "type": "arrayElement",
          },
          "type": "array",
        },
        "type": "member",
      },
    ],
    "type": "object",
  },
  "rootTypeParser": Object {
    "baseTypeName": "MyModel",
    "typeName": "MyModel",
    "typeParameters": Array [],
  },
  "type": "root",
}
`;

exports[`generateParserModel for a type alias object literal string literal member 1`] = `
Object {
  "name": "data",
  "parser": Object {
    "members": Array [
      Object {
        "name": "a",
        "optional": false,
        "parser": Object {
          "literal": "xxx",
          "type": "string-literal",
        },
        "type": "member",
      },
    ],
    "type": "object",
  },
  "rootTypeParser": Object {
    "baseTypeName": "MyModel",
    "typeName": "MyModel",
    "typeParameters": Array [],
  },
  "type": "root",
}
`;

exports[`generateParserModel for a type alias object literal string member 1`] = `
Object {
  "name": "data",
  "parser": Object {
    "members": Array [
      Object {
        "name": "a",
        "optional": false,
        "parser": Object {
          "type": "string",
        },
        "type": "member",
      },
    ],
    "type": "object",
  },
  "rootTypeParser": Object {
    "baseTypeName": "MyModel",
    "typeName": "MyModel",
    "typeParameters": Array [],
  },
  "type": "root",
}
`;

exports[`generateParserModel for a type alias object literal true literal member 1`] = `
Object {
  "name": "data",
  "parser": Object {
    "members": Array [
      Object {
        "name": "a",
        "optional": false,
        "parser": Object {
          "literal": true,
          "type": "boolean-literal",
        },
        "type": "member",
      },
    ],
    "type": "object",
  },
  "rootTypeParser": Object {
    "baseTypeName": "MyModel",
    "typeName": "MyModel",
    "typeParameters": Array [],
  },
  "type": "root",
}
`;

exports[`generateParserModel for a type alias object literal with no members 1`] = `
Object {
  "name": "data",
  "parser": Object {
    "members": Array [],
    "type": "object",
  },
  "rootTypeParser": Object {
    "baseTypeName": "MyModel",
    "typeName": "MyModel",
    "typeParameters": Array [],
  },
  "type": "root",
}
`;

exports[`generateParserModel for a type alias tuple simple 1`] = `
Object {
  "name": "data",
  "parser": Object {
    "elements": Array [
      Object {
        "parser": Object {
          "type": "string",
        },
        "position": 0,
        "type": "tupleElement",
      },
      Object {
        "parser": Object {
          "type": "number",
        },
        "position": 1,
        "type": "tupleElement",
      },
    ],
    "type": "tuple",
  },
  "rootTypeParser": Object {
    "baseTypeName": "MyModel",
    "typeName": "MyModel",
    "typeParameters": Array [],
  },
  "type": "root",
}
`;

exports[`generateParserModel for a type alias tuple tuple with typealias 1`] = `
Object {
  "name": "data",
  "parser": Object {
    "elements": Array [
      Object {
        "parser": Object {
          "type": "string",
        },
        "position": 0,
        "type": "tupleElement",
      },
      Object {
        "parser": Object {
          "members": Array [
            Object {
              "name": "a",
              "optional": false,
              "parser": Object {
                "type": "number",
              },
              "type": "member",
            },
          ],
          "type": "object",
        },
        "position": 1,
        "type": "tupleElement",
      },
    ],
    "type": "tuple",
  },
  "rootTypeParser": Object {
    "baseTypeName": "MyModel",
    "typeName": "MyModel",
    "typeParameters": Array [],
  },
  "type": "root",
}
`;

exports[`generateParserModel for a type alias tuple tuple within tuple 1`] = `
Object {
  "name": "data",
  "parser": Object {
    "elements": Array [
      Object {
        "parser": Object {
          "type": "string",
        },
        "position": 0,
        "type": "tupleElement",
      },
      Object {
        "parser": Object {
          "elements": Array [
            Object {
              "parser": Object {
                "members": Array [
                  Object {
                    "name": "a",
                    "optional": false,
                    "parser": Object {
                      "type": "number",
                    },
                    "type": "member",
                  },
                ],
                "type": "object",
              },
              "position": 0,
              "type": "tupleElement",
            },
            Object {
              "parser": Object {
                "type": "boolean",
              },
              "position": 1,
              "type": "tupleElement",
            },
          ],
          "type": "tuple",
        },
        "position": 1,
        "type": "tupleElement",
      },
    ],
    "type": "tuple",
  },
  "rootTypeParser": Object {
    "baseTypeName": "MyModel",
    "typeName": "MyModel",
    "typeParameters": Array [],
  },
  "type": "root",
}
`;

exports[`generateParserModel for a type alias union simple 1`] = `
Object {
  "name": "data",
  "parser": Object {
    "oneOf": Array [
      Object {
        "type": "string",
      },
      Object {
        "type": "number",
      },
    ],
    "type": "union",
  },
  "rootTypeParser": Object {
    "baseTypeName": "MyModel",
    "typeName": "MyModel",
    "typeParameters": Array [],
  },
  "type": "root",
}
`;

exports[`generateParserModel for a type alias union with tuple 1`] = `
Object {
  "name": "data",
  "parser": Object {
    "oneOf": Array [
      Object {
        "type": "string",
      },
      Object {
        "elements": Array [
          Object {
            "parser": Object {
              "members": Array [
                Object {
                  "name": "a",
                  "optional": false,
                  "parser": Object {
                    "type": "number",
                  },
                  "type": "member",
                },
              ],
              "type": "object",
            },
            "position": 0,
            "type": "tupleElement",
          },
          Object {
            "parser": Object {
              "type": "string",
            },
            "position": 1,
            "type": "tupleElement",
          },
        ],
        "type": "tuple",
      },
    ],
    "type": "union",
  },
  "rootTypeParser": Object {
    "baseTypeName": "MyModel",
    "typeName": "MyModel",
    "typeParameters": Array [],
  },
  "type": "root",
}
`;

exports[`generateParserModel for a type alias union with tuple 2`] = `
Object {
  "name": "data",
  "parser": Object {
    "oneOf": Array [
      Object {
        "members": Array [
          Object {
            "name": "a",
            "optional": false,
            "parser": Object {
              "type": "string",
            },
            "type": "member",
          },
          Object {
            "name": "b",
            "optional": false,
            "parser": Object {
              "type": "number",
            },
            "type": "member",
          },
        ],
        "type": "object",
      },
      Object {
        "members": Array [
          Object {
            "name": "a",
            "optional": false,
            "parser": Object {
              "type": "number",
            },
            "type": "member",
          },
          Object {
            "name": "b",
            "optional": false,
            "parser": Object {
              "type": "string",
            },
            "type": "member",
          },
        ],
        "type": "object",
      },
    ],
    "type": "union",
  },
  "rootTypeParser": Object {
    "baseTypeName": "MyModel",
    "typeName": "MyModel",
    "typeParameters": Array [],
  },
  "type": "root",
}
`;

exports[`generateParserModel for a type alias union with type literal 1`] = `
Object {
  "name": "data",
  "parser": Object {
    "oneOf": Array [
      Object {
        "type": "string",
      },
      Object {
        "members": Array [
          Object {
            "name": "a",
            "optional": false,
            "parser": Object {
              "type": "number",
            },
            "type": "member",
          },
        ],
        "type": "object",
      },
    ],
    "type": "union",
  },
  "rootTypeParser": Object {
    "baseTypeName": "MyModel",
    "typeName": "MyModel",
    "typeParameters": Array [],
  },
  "type": "root",
}
`;

exports[`generateParserModel for an interface boolean array member 1`] = `
Object {
  "name": "data",
  "parser": Object {
    "members": Array [
      Object {
        "name": "a",
        "optional": false,
        "parser": Object {
          "depth": 0,
          "element": Object {
            "depth": 0,
            "parser": Object {
              "type": "boolean",
            },
            "type": "arrayElement",
          },
          "type": "array",
        },
        "type": "member",
      },
    ],
    "type": "object",
  },
  "rootTypeParser": Object {
    "baseTypeName": "MyModel",
    "typeName": "MyModel",
    "typeParameters": Array [],
  },
  "type": "root",
}
`;

exports[`generateParserModel for an interface boolean member 1`] = `
Object {
  "name": "data",
  "parser": Object {
    "members": Array [
      Object {
        "name": "a",
        "optional": false,
        "parser": Object {
          "type": "boolean",
        },
        "type": "member",
      },
    ],
    "type": "object",
  },
  "rootTypeParser": Object {
    "baseTypeName": "MyModel",
    "typeName": "MyModel",
    "typeParameters": Array [],
  },
  "type": "root",
}
`;

exports[`generateParserModel for an interface deep nested object 1`] = `
Object {
  "name": "data",
  "parser": Object {
    "members": Array [
      Object {
        "name": "a",
        "optional": false,
        "parser": Object {
          "depth": 0,
          "element": Object {
            "depth": 0,
            "parser": Object {
              "members": Array [
                Object {
                  "name": "b",
                  "optional": true,
                  "parser": Object {
                    "members": Array [
                      Object {
                        "name": "c",
                        "optional": false,
                        "parser": Object {
                          "members": Array [
                            Object {
                              "name": "d",
                              "optional": false,
                              "parser": Object {
                                "depth": 1,
                                "element": Object {
                                  "depth": 1,
                                  "parser": Object {
                                    "members": Array [
                                      Object {
                                        "name": "e",
                                        "optional": false,
                                        "parser": Object {
                                          "members": Array [
                                            Object {
                                              "name": "f",
                                              "optional": false,
                                              "parser": Object {
                                                "depth": 2,
                                                "element": Object {
                                                  "depth": 2,
                                                  "parser": Object {
                                                    "type": "boolean",
                                                  },
                                                  "type": "arrayElement",
                                                },
                                                "type": "array",
                                              },
                                              "type": "member",
                                            },
                                          ],
                                          "type": "object",
                                        },
                                        "type": "member",
                                      },
                                    ],
                                    "type": "object",
                                  },
                                  "type": "arrayElement",
                                },
                                "type": "array",
                              },
                              "type": "member",
                            },
                          ],
                          "type": "object",
                        },
                        "type": "member",
                      },
                    ],
                    "type": "object",
                  },
                  "type": "member",
                },
              ],
              "type": "object",
            },
            "type": "arrayElement",
          },
          "type": "array",
        },
        "type": "member",
      },
    ],
    "type": "object",
  },
  "rootTypeParser": Object {
    "baseTypeName": "MyModel",
    "typeName": "MyModel",
    "typeParameters": Array [],
  },
  "type": "root",
}
`;

exports[`generateParserModel for an interface null member 1`] = `
Object {
  "name": "data",
  "parser": Object {
    "members": Array [
      Object {
        "name": "a",
        "optional": false,
        "parser": Object {
          "type": "null",
        },
        "type": "member",
      },
    ],
    "type": "object",
  },
  "rootTypeParser": Object {
    "baseTypeName": "MyModel",
    "typeName": "MyModel",
    "typeParameters": Array [],
  },
  "type": "root",
}
`;

exports[`generateParserModel for an interface number array member 1`] = `
Object {
  "name": "data",
  "parser": Object {
    "members": Array [
      Object {
        "name": "a",
        "optional": false,
        "parser": Object {
          "depth": 0,
          "element": Object {
            "depth": 0,
            "parser": Object {
              "type": "number",
            },
            "type": "arrayElement",
          },
          "type": "array",
        },
        "type": "member",
      },
    ],
    "type": "object",
  },
  "rootTypeParser": Object {
    "baseTypeName": "MyModel",
    "typeName": "MyModel",
    "typeParameters": Array [],
  },
  "type": "root",
}
`;

exports[`generateParserModel for an interface number literal member 1`] = `
Object {
  "name": "data",
  "parser": Object {
    "members": Array [
      Object {
        "name": "a",
        "optional": false,
        "parser": Object {
          "literal": 123,
          "type": "number-literal",
        },
        "type": "member",
      },
    ],
    "type": "object",
  },
  "rootTypeParser": Object {
    "baseTypeName": "MyModel",
    "typeName": "MyModel",
    "typeParameters": Array [],
  },
  "type": "root",
}
`;

exports[`generateParserModel for an interface number member 1`] = `
Object {
  "name": "data",
  "parser": Object {
    "members": Array [
      Object {
        "name": "a",
        "optional": false,
        "parser": Object {
          "type": "number",
        },
        "type": "member",
      },
    ],
    "type": "object",
  },
  "rootTypeParser": Object {
    "baseTypeName": "MyModel",
    "typeName": "MyModel",
    "typeParameters": Array [],
  },
  "type": "root",
}
`;

exports[`generateParserModel for an interface object literal array member 1`] = `
Object {
  "name": "data",
  "parser": Object {
    "members": Array [
      Object {
        "name": "a",
        "optional": false,
        "parser": Object {
          "depth": 0,
          "element": Object {
            "depth": 0,
            "parser": Object {
              "members": Array [
                Object {
                  "name": "b",
                  "optional": false,
                  "parser": Object {
                    "type": "number",
                  },
                  "type": "member",
                },
              ],
              "type": "object",
            },
            "type": "arrayElement",
          },
          "type": "array",
        },
        "type": "member",
      },
    ],
    "type": "object",
  },
  "rootTypeParser": Object {
    "baseTypeName": "MyModel",
    "typeName": "MyModel",
    "typeParameters": Array [],
  },
  "type": "root",
}
`;

exports[`generateParserModel for an interface object literal member 1`] = `
Object {
  "name": "data",
  "parser": Object {
    "members": Array [
      Object {
        "name": "a",
        "optional": false,
        "parser": Object {
          "members": Array [
            Object {
              "name": "b",
              "optional": false,
              "parser": Object {
                "type": "number",
              },
              "type": "member",
            },
          ],
          "type": "object",
        },
        "type": "member",
      },
    ],
    "type": "object",
  },
  "rootTypeParser": Object {
    "baseTypeName": "MyModel",
    "typeName": "MyModel",
    "typeParameters": Array [],
  },
  "type": "root",
}
`;

exports[`generateParserModel for an interface optional member 1`] = `
Object {
  "name": "data",
  "parser": Object {
    "members": Array [
      Object {
        "name": "a",
        "optional": true,
        "parser": Object {
          "type": "string",
        },
        "type": "member",
      },
    ],
    "type": "object",
  },
  "rootTypeParser": Object {
    "baseTypeName": "MyModel",
    "typeName": "MyModel",
    "typeParameters": Array [],
  },
  "type": "root",
}
`;

exports[`generateParserModel for an interface optional object literal member 1`] = `
Object {
  "name": "data",
  "parser": Object {
    "members": Array [
      Object {
        "name": "a",
        "optional": true,
        "parser": Object {
          "members": Array [
            Object {
              "name": "b",
              "optional": false,
              "parser": Object {
                "type": "number",
              },
              "type": "member",
            },
          ],
          "type": "object",
        },
        "type": "member",
      },
    ],
    "type": "object",
  },
  "rootTypeParser": Object {
    "baseTypeName": "MyModel",
    "typeName": "MyModel",
    "typeParameters": Array [],
  },
  "type": "root",
}
`;

exports[`generateParserModel for an interface optional object literal with optional member 1`] = `
Object {
  "name": "data",
  "parser": Object {
    "members": Array [
      Object {
        "name": "a",
        "optional": true,
        "parser": Object {
          "members": Array [
            Object {
              "name": "b",
              "optional": true,
              "parser": Object {
                "type": "number",
              },
              "type": "member",
            },
          ],
          "type": "object",
        },
        "type": "member",
      },
    ],
    "type": "object",
  },
  "rootTypeParser": Object {
    "baseTypeName": "MyModel",
    "typeName": "MyModel",
    "typeParameters": Array [],
  },
  "type": "root",
}
`;

exports[`generateParserModel for an interface optional string array member 1`] = `
Object {
  "name": "data",
  "parser": Object {
    "members": Array [
      Object {
        "name": "a",
        "optional": true,
        "parser": Object {
          "depth": 0,
          "element": Object {
            "depth": 0,
            "parser": Object {
              "type": "string",
            },
            "type": "arrayElement",
          },
          "type": "array",
        },
        "type": "member",
      },
    ],
    "type": "object",
  },
  "rootTypeParser": Object {
    "baseTypeName": "MyModel",
    "typeName": "MyModel",
    "typeParameters": Array [],
  },
  "type": "root",
}
`;

exports[`generateParserModel for an interface string array member 1`] = `
Object {
  "name": "data",
  "parser": Object {
    "members": Array [
      Object {
        "name": "a",
        "optional": false,
        "parser": Object {
          "depth": 0,
          "element": Object {
            "depth": 0,
            "parser": Object {
              "type": "string",
            },
            "type": "arrayElement",
          },
          "type": "array",
        },
        "type": "member",
      },
    ],
    "type": "object",
  },
  "rootTypeParser": Object {
    "baseTypeName": "MyModel",
    "typeName": "MyModel",
    "typeParameters": Array [],
  },
  "type": "root",
}
`;

exports[`generateParserModel for an interface string literal member 1`] = `
Object {
  "name": "data",
  "parser": Object {
    "members": Array [
      Object {
        "name": "a",
        "optional": false,
        "parser": Object {
          "literal": "aap",
          "type": "string-literal",
        },
        "type": "member",
      },
    ],
    "type": "object",
  },
  "rootTypeParser": Object {
    "baseTypeName": "MyModel",
    "typeName": "MyModel",
    "typeParameters": Array [],
  },
  "type": "root",
}
`;

exports[`generateParserModel for an interface string member 1`] = `
Object {
  "name": "data",
  "parser": Object {
    "members": Array [
      Object {
        "name": "a",
        "optional": false,
        "parser": Object {
          "type": "string",
        },
        "type": "member",
      },
    ],
    "type": "object",
  },
  "rootTypeParser": Object {
    "baseTypeName": "MyModel",
    "typeName": "MyModel",
    "typeParameters": Array [],
  },
  "type": "root",
}
`;

exports[`generateParserModel for an interface true literal member 1`] = `
Object {
  "name": "data",
  "parser": Object {
    "members": Array [
      Object {
        "name": "a",
        "optional": false,
        "parser": Object {
          "literal": true,
          "type": "boolean-literal",
        },
        "type": "member",
      },
    ],
    "type": "object",
  },
  "rootTypeParser": Object {
    "baseTypeName": "MyModel",
    "typeName": "MyModel",
    "typeParameters": Array [],
  },
  "type": "root",
}
`;

exports[`generateParserModel for an interface with no members 1`] = `
Object {
  "name": "data",
  "parser": Object {
    "members": Array [],
    "type": "object",
  },
  "rootTypeParser": Object {
    "baseTypeName": "MyModel",
    "typeName": "MyModel",
    "typeParameters": Array [],
  },
  "type": "root",
}
`;

exports[`generateParserModel for enums enum member 1`] = `
Object {
  "name": "data",
  "parser": Object {
    "members": Array [
      Object {
        "name": "en",
        "optional": false,
        "parser": Object {
          "literal": 0,
          "type": "number-literal",
        },
        "type": "member",
      },
    ],
    "type": "object",
  },
  "rootTypeParser": Object {
    "baseTypeName": "MyModel",
    "typeName": "MyModel",
    "typeParameters": Array [],
  },
  "type": "root",
}
`;

exports[`generateParserModel for enums enum member model 1`] = `
Object {
  "name": "data",
  "parser": Object {
    "literal": 1,
    "type": "number-literal",
  },
  "rootTypeParser": Object {
    "baseTypeName": "MyModel",
    "typeName": "MyModel",
    "typeParameters": Array [],
  },
  "type": "root",
}
`;

exports[`generateParserModel for enums enum model 1`] = `
Object {
  "name": "data",
  "parser": Object {
    "members": Array [
      Object {
        "literal": 0,
        "type": "number-literal",
      },
      Object {
        "literal": 1,
        "type": "number-literal",
      },
      Object {
        "literal": 2,
        "type": "number-literal",
      },
    ],
    "type": "enum",
  },
  "rootTypeParser": Object {
    "baseTypeName": "MyModel",
    "typeName": "MyModel",
    "typeParameters": Array [],
  },
  "type": "root",
}
`;

exports[`generateParserModel for enums enum with auto number enum members 1`] = `
Object {
  "name": "data",
  "parser": Object {
    "members": Array [
      Object {
        "name": "en",
        "optional": false,
        "parser": Object {
          "members": Array [
            Object {
              "literal": 0,
              "type": "number-literal",
            },
            Object {
              "literal": 100,
              "type": "number-literal",
            },
            Object {
              "literal": 101,
              "type": "number-literal",
            },
          ],
          "type": "enum",
        },
        "type": "member",
      },
    ],
    "type": "object",
  },
  "rootTypeParser": Object {
    "baseTypeName": "MyModel",
    "typeName": "MyModel",
    "typeParameters": Array [],
  },
  "type": "root",
}
`;

exports[`generateParserModel for enums enum with number enum members 1`] = `
Object {
  "name": "data",
  "parser": Object {
    "members": Array [
      Object {
        "name": "en",
        "optional": false,
        "parser": Object {
          "members": Array [
            Object {
              "literal": 0,
              "type": "number-literal",
            },
            Object {
              "literal": 1,
              "type": "number-literal",
            },
          ],
          "type": "enum",
        },
        "type": "member",
      },
    ],
    "type": "object",
  },
  "rootTypeParser": Object {
    "baseTypeName": "MyModel",
    "typeName": "MyModel",
    "typeParameters": Array [],
  },
  "type": "root",
}
`;

exports[`generateParserModel for enums enum with string enum members 1`] = `
Object {
  "name": "data",
  "parser": Object {
    "members": Array [
      Object {
        "name": "en",
        "optional": false,
        "parser": Object {
          "members": Array [
            Object {
              "literal": "a",
              "type": "string-literal",
            },
            Object {
              "literal": "b",
              "type": "string-literal",
            },
          ],
          "type": "enum",
        },
        "type": "member",
      },
    ],
    "type": "object",
  },
  "rootTypeParser": Object {
    "baseTypeName": "MyModel",
    "typeName": "MyModel",
    "typeParameters": Array [],
  },
  "type": "root",
}
`;

exports[`generateParserModel for generics type with default generic parameter 1`] = `
Object {
  "name": "data",
  "parser": Object {
    "members": Array [
      Object {
        "name": "prop",
        "optional": false,
        "parser": Object {
          "defaultParser": Object {
            "parser": Object {
              "type": "number",
            },
            "typeName": "number",
          },
          "position": 0,
          "type": "typeParameter",
          "typeName": "T",
        },
        "type": "member",
      },
    ],
    "type": "object",
  },
  "rootTypeParser": Object {
    "baseTypeName": "MyModel",
    "typeName": "MyModel<T>",
    "typeParameters": Array [
      Object {
        "defaultParser": Object {
          "parser": Object {
            "type": "number",
          },
          "typeName": "number",
        },
        "typeName": "T",
      },
    ],
  },
  "type": "root",
}
`;

exports[`generateParserModel for generics type with generic parameter 1`] = `
Object {
  "name": "data",
  "parser": Object {
    "members": Array [
      Object {
        "name": "prop",
        "optional": false,
        "parser": Object {
          "defaultParser": undefined,
          "position": 0,
          "type": "typeParameter",
          "typeName": "T",
        },
        "type": "member",
      },
    ],
    "type": "object",
  },
  "rootTypeParser": Object {
    "baseTypeName": "MyModel",
    "typeName": "MyModel<T>",
    "typeParameters": Array [
      Object {
        "defaultParser": undefined,
        "typeName": "T",
      },
    ],
  },
  "type": "root",
}
`;

exports[`generateParserModel for generics type with parameterized generic parameter 1`] = `
Object {
  "name": "data",
  "parser": Object {
    "members": Array [
      Object {
        "name": "a",
        "optional": false,
        "parser": Object {
          "baseTypeName": "Test",
          "type": "reference",
          "typeArguments": Array [
            Object {
              "parser": Object {
                "type": "number",
              },
              "typeName": "number",
            },
          ],
          "typeName": "Test<number>",
        },
        "type": "member",
      },
    ],
    "type": "object",
  },
  "rootTypeParser": Object {
    "baseTypeName": "MyModel",
    "typeName": "MyModel",
    "typeParameters": Array [],
  },
  "type": "root",
}
`;

exports[`generateParserModel mapped types mapping props to booleans 1`] = `
Object {
  "name": "data",
  "parser": Object {
    "members": Array [
      Object {
        "name": "darkMode",
        "optional": true,
        "parser": Object {
          "type": "boolean",
        },
        "type": "member",
      },
      Object {
        "name": "newUserProfile",
        "optional": true,
        "parser": Object {
          "type": "boolean",
        },
        "type": "member",
      },
    ],
    "type": "object",
  },
  "rootTypeParser": Object {
    "baseTypeName": "FeatureOptions",
    "typeName": "FeatureOptions",
    "typeParameters": Array [],
  },
  "type": "root",
}
`;

exports[`generateParserModel mapped types mapping readonly keys to mutable keys 1`] = `
Object {
  "name": "data",
  "parser": Object {
    "members": Array [
      Object {
        "name": "id",
        "optional": false,
        "parser": Object {
          "type": "string",
        },
        "type": "member",
      },
      Object {
        "name": "name",
        "optional": false,
        "parser": Object {
          "type": "string",
        },
        "type": "member",
      },
    ],
    "type": "object",
  },
  "type": "root",
}
`;

exports[`generateParserModel mapped types simple 1`] = `
Object {
  "name": "data",
  "parser": Object {
    "members": Array [
      Object {
        "name": "x",
        "optional": false,
        "parser": Object {
          "members": Array [
            Object {
              "depth": 0,
              "keyParser": Object {
                "oneOf": Array [
                  Object {
                    "literal": "aap",
                    "type": "string-literal",
                  },
                  Object {
                    "literal": "noot",
                    "type": "string-literal",
                  },
                ],
                "type": "union",
              },
              "optional": false,
              "parser": Object {
                "members": Array [
                  Object {
                    "name": "y",
                    "optional": false,
                    "parser": Object {
                      "type": "string",
                    },
                    "type": "member",
                  },
                ],
                "type": "object",
              },
              "type": "indexMember",
            },
          ],
          "type": "object",
        },
        "type": "member",
      },
    ],
    "type": "object",
  },
  "rootTypeParser": Object {
    "baseTypeName": "MyModel",
    "typeName": "MyModel",
    "typeParameters": Array [],
  },
  "type": "root",
}
`;

exports[`generateParserModel other types Partial<Record<X, number>> 1`] = `
Object {
  "name": "data",
  "parser": Object {
    "members": Array [
      Object {
        "name": "0",
        "optional": true,
        "parser": Object {
          "type": "number",
        },
        "type": "member",
      },
      Object {
        "name": "1",
        "optional": true,
        "parser": Object {
          "type": "number",
        },
        "type": "member",
      },
      Object {
        "name": "2",
        "optional": true,
        "parser": Object {
          "type": "number",
        },
        "type": "member",
      },
    ],
    "type": "object",
  },
  "rootTypeParser": Object {
    "baseTypeName": "Noot",
    "typeName": "Noot",
    "typeParameters": Array [],
  },
  "type": "root",
}
`;

exports[`generateParserModel other types Partial<Record<X, string>> 1`] = `
Object {
  "name": "data",
  "parser": Object {
    "members": Array [
      Object {
        "name": "a",
        "optional": true,
        "parser": Object {
          "type": "string",
        },
        "type": "member",
      },
      Object {
        "name": "b",
        "optional": true,
        "parser": Object {
          "type": "string",
        },
        "type": "member",
      },
      Object {
        "name": "c",
        "optional": true,
        "parser": Object {
          "type": "string",
        },
        "type": "member",
      },
    ],
    "type": "object",
  },
  "rootTypeParser": Object {
    "baseTypeName": "Noot",
    "typeName": "Noot",
    "typeParameters": Array [],
  },
  "type": "root",
}
`;

exports[`generateParserModel other types any / unknown 1`] = `
Object {
  "name": "data",
  "parser": Object {
    "members": Array [
      Object {
        "name": "a",
        "optional": false,
        "parser": Object {
          "type": "any",
        },
        "type": "member",
      },
      Object {
        "name": "b",
        "optional": false,
        "parser": Object {
          "type": "any",
        },
        "type": "member",
      },
    ],
    "type": "object",
  },
  "rootTypeParser": Object {
    "baseTypeName": "MyModel",
    "typeName": "MyModel",
    "typeParameters": Array [],
  },
  "type": "root",
}
`;

exports[`generateParserModel other types date 1`] = `
Object {
  "name": "data",
  "parser": Object {
    "members": Array [
      Object {
        "name": "a",
        "optional": false,
        "parser": Object {
          "type": "date",
        },
        "type": "member",
      },
    ],
    "type": "object",
  },
  "rootTypeParser": Object {
    "baseTypeName": "MyModel",
    "typeName": "MyModel",
    "typeParameters": Array [],
  },
  "type": "root",
}
`;

exports[`generateParserModel other types index type 1`] = `
Object {
  "name": "data",
  "parser": Object {
    "members": Array [
      Object {
        "depth": 0,
        "keyParser": Object {
          "type": "string",
        },
        "optional": false,
        "parser": Object {
          "members": Array [
            Object {
              "name": "kees",
              "optional": false,
              "parser": Object {
                "type": "string",
              },
              "type": "member",
            },
          ],
          "type": "object",
        },
        "type": "indexMember",
      },
      Object {
        "name": "x",
        "optional": false,
        "parser": Object {
          "members": Array [
            Object {
              "name": "kees",
              "optional": false,
              "parser": Object {
                "type": "string",
              },
              "type": "member",
            },
            Object {
              "name": "kaas",
              "optional": false,
              "parser": Object {
                "members": Array [
                  Object {
                    "depth": 0,
                    "keyParser": Object {
                      "oneOf": Array [
                        Object {
                          "literal": "aad",
                          "type": "string-literal",
                        },
                        Object {
                          "literal": "banaan",
                          "type": "string-literal",
                        },
                      ],
                      "type": "union",
                    },
                    "optional": false,
                    "parser": Object {
                      "type": "string",
                    },
                    "type": "indexMember",
                  },
                ],
                "type": "object",
              },
              "type": "member",
            },
          ],
          "type": "object",
        },
        "type": "member",
      },
    ],
    "type": "object",
  },
  "rootTypeParser": Object {
    "baseTypeName": "MyModel",
    "typeName": "MyModel",
    "typeParameters": Array [],
  },
  "type": "root",
}
`;

exports[`generateParserModel reference insde a type literal 1`] = `
Object {
  "name": "data",
  "parser": Object {
    "members": Array [
      Object {
        "name": "a",
        "optional": false,
        "parser": Object {
          "members": Array [
            Object {
              "name": "b",
              "optional": false,
              "parser": Object {
                "baseTypeName": "Test",
                "type": "reference",
                "typeArguments": Array [],
                "typeName": "Test",
              },
              "type": "member",
            },
          ],
          "type": "object",
        },
        "type": "member",
      },
    ],
    "type": "object",
  },
  "rootTypeParser": Object {
    "baseTypeName": "MyModel",
    "typeName": "MyModel",
    "typeParameters": Array [],
  },
  "type": "root",
}
`;

exports[`generateParserModel reference to another interface 1`] = `
Object {
  "name": "data",
  "parser": Object {
    "members": Array [
      Object {
        "name": "a",
        "optional": false,
        "parser": Object {
          "baseTypeName": "Test",
          "type": "reference",
          "typeArguments": Array [],
          "typeName": "Test",
        },
        "type": "member",
      },
    ],
    "type": "object",
  },
  "rootTypeParser": Object {
    "baseTypeName": "MyModel",
    "typeName": "MyModel",
    "typeParameters": Array [],
  },
  "type": "root",
}
`;

exports[`generateParserModel type operator node keyof an interface 1`] = `
Object {
  "name": "data",
  "parser": Object {
    "members": Array [
      Object {
        "name": "props",
        "optional": false,
        "parser": Object {
          "members": Array [
            Object {
              "depth": 0,
              "keyParser": Object {
                "oneOf": Array [
                  Object {
                    "literal": "kaas",
                    "type": "string-literal",
                  },
                  Object {
                    "literal": "koos",
                    "type": "string-literal",
                  },
                ],
                "type": "union",
              },
              "optional": false,
              "parser": Object {
                "type": "number",
              },
              "type": "indexMember",
            },
          ],
          "type": "object",
        },
        "type": "member",
      },
    ],
    "type": "object",
  },
  "rootTypeParser": Object {
    "baseTypeName": "MyModel",
    "typeName": "MyModel",
    "typeParameters": Array [],
  },
  "type": "root",
}
`;
